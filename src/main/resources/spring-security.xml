<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                                 http://www.springframework.org/schema/security
                                 http://www.springframework.org/schema/security/spring-security.xsd">

   <http pattern="/admin/login.action" security="none"/>
   <http pattern="/resources/**" security="none"/>
   <http use-expressions="true" entry-point-ref="authenticationEntryPoint">

        <access-denied-handler ref="myAccessDeniedHandler"/>

        <intercept-url pattern="/admin/**" access="isAuthenticated()" />
        <intercept-url pattern="/**" access="isAuthenticated()" />

       <!--默认退出路径为【/j_spring_security_logout】,但可以通过【logout-url】属性自定义.-->
       <logout logout-success-url="/security/login.action?error=logout-success" logout-url="/logout.action"
               invalidate-session="true" delete-cookies="JSESSIONID"/>

       <!-- 实现免登陆验证-->
       <!--  <remember-me key="MY_REMEMBER_ME_KEY" services-ref="rememberMeServices" />-->
       <!--<remember-me services-alias="rememberMeServices" data-source-ref="dataSource" />-->

       <!-- session管理 -->
       <session-management session-authentication-error-url="/security/login.action?error=invalid-session-authentication-error"
                           invalid-session-url="/security/login.action?error=invalid-session"/>
       <!-- 增加一个filter -->
       <custom-filter position="FORM_LOGIN_FILTER" ref="validateCodeAuthenticationFilter"/>
       <!-- 增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
       <custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="myFilter"/>
       <csrf disabled="true"/>
       <headers>
           <frame-options policy="SAMEORIGIN"/>
       </headers>
   </http>

    <!-- 程序验证入口 -->
    <beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
    <beans:constructor-arg index="0" value="/admin/login.action"/>
    </beans:bean>

    <beans:bean id="myAccessDeniedHandler" class="com.frame.security.extend.MyAccessDeniedHandler">
        <beans:property name="accessDeniedUrl" value="/admin/page403.action" />
    </beans:bean>

    <beans:bean id="validateCodeAuthenticationFilter" class="com.frame.security.extend.ValidateCodeUsernamePasswordAuthenticationFilter">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <beans:property name="filterProcessesUrl" value="/j_spring_security_check"/>
        <beans:property name="usernameParameter" value="j_username"/>
        <beans:property name="passwordParameter" value="j_password"/>
        <beans:property name="authenticationFailureHandler">
            <beans:bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
                <beans:property name="defaultFailureUrl" value="/admin/login.action?error=true"/>
            </beans:bean>
        </beans:property>
        <beans:property name="AuthenticationSuccessHandler">
            <beans:bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
                <beans:property name="defaultTargetUrl" value="/admin/index.action"/>
                <beans:property name="alwaysUseDefaultTargetUrl" value="true"/>
            </beans:bean>
        </beans:property>
    </beans:bean>

    <!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
    我们的所有控制将在这三个类中实现，解释详见具体配置 -->
    <beans:bean id="myFilter" class="com.frame.security.extend.MyFilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean"/>
        <beans:property name="securityMetadataSource" ref="securityMetadataSource"/>
    </beans:bean>

    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref='myUserDetailsService'/>
    </authentication-manager>

    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等-->
    <beans:bean id="myUserDetailsService" class="com.frame.security.extend.MyUserDetailsService">
        <beans:property name="systemUserService" ref="systemUserService"/>
        <beans:property name="systemAuthorityService" ref="systemAuthorityService"/>
    </beans:bean>

    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
    <beans:bean id="myAccessDecisionManagerBean" class="com.frame.security.extend.MyAccessDecisionManager"/>

    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
    <beans:bean id="securityMetadataSource" class="com.frame.security.extend.MyInvocationSecurityMetadataSource">
        <beans:constructor-arg name="systemAuthorityService" ref="systemAuthorityService"/>
        <beans:constructor-arg name="systemResourceService" ref="systemResourceService"/>
    </beans:bean>

    <!--这里提供数据查询对象-->
    <beans:bean id="systemUserService" class="com.frame.security.service.impl.SystemUserServiceImpl"/>
    <beans:bean id="systemAuthorityService" class="com.frame.security.service.impl.SystemAuthorityServiceImpl"/>
    <beans:bean id="systemResourceService" class="com.frame.security.service.impl.SystemResourceServiceImpl"/>

</beans:beans>